openapi: 3.0.3
info:
  title: Fansworld Creator Platform API
  version: 1.0.0
  description: |
    Production-ready API for creator subscription platform with OnlyFans-level functionality.
    Supports content creation, subscription management, messaging, and creator monetization.
  contact:
    name: Fansworld API Team
    email: api@fansworld.com
  license:
    name: Proprietary
    url: https://fansworld.com/license

servers:
  - url: https://api.fansworld.com/v1
    description: Production server
  - url: https://staging-api.fansworld.com/v1
    description: Staging server
  - url: http://localhost:3001/api/v1
    description: Development server

security:
  - bearerAuth: []

paths:
  # Health & System
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "ok" }
                  timestamp: { type: string, format: date-time }

  # Authentication & Users
  /auth/register:
    post:
      summary: Register new user account
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, username]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                username: { type: string, minLength: 3, maxLength: 30 }
                referralCode: { type: string }
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists

  /auth/login:
    post:
      summary: Authenticate user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  # User Management
  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update current user profile
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '404':
          description: User not found

  # Creator Management
  /creators/{username}:
    get:
      summary: Get creator profile by username
      tags: [Creators]
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Creator profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfile'
        '404':
          description: Creator not found

  /creators/me/onboarding:
    post:
      summary: Complete creator onboarding
      tags: [Creators]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatorOnboardingRequest'
      responses:
        '201':
          description: Creator onboarding completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfile'

  /creators/me/settings:
    put:
      summary: Update creator settings
      tags: [Creators]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatorSettingsRequest'
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfile'

  # Content & Posts
  /creators/{username}/posts:
    get:
      summary: Get creator posts
      tags: [Content]
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
            enum: [image, video, audio, text]
      responses:
        '200':
          description: Posts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'

  /posts:
    post:
      summary: Create new post
      tags: [Content]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{postId}:
    get:
      summary: Get post by ID
      tags: [Content]
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '402':
          description: Payment required to access content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequired'
        '404':
          description: Post not found

  # Media Management
  /media/sign-upload:
    post:
      summary: Get signed URL for media upload
      tags: [Media]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [filename, contentType, size]
              properties:
                filename: { type: string }
                contentType: { type: string }
                size: { type: integer, maximum: 104857600 } # 100MB
                isPublic: { type: boolean, default: false }
      responses:
        '201':
          description: Signed upload URL generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedUploadResponse'

  /media/{mediaId}:
    get:
      summary: Get media file (with access control)
      tags: [Media]
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Media file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '402':
          description: Payment required
        '404':
          description: Media not found

  # Subscriptions (Stubbed)
  /subscriptions:
    get:
      summary: Get user subscriptions
      tags: [Subscriptions]
      responses:
        '200':
          description: User subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsResponse'

    post:
      summary: Create subscription (stub)
      tags: [Subscriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [creatorId, tierId]
              properties:
                creatorId: { type: string }
                tierId: { type: string }
      responses:
        '201':
          description: Subscription created (pending payment)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '501':
          description: Payment integration not implemented

  # Messaging
  /conversations:
    get:
      summary: Get user conversations
      tags: [Messaging]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: cursor
          schema:
            type: string
      responses:
        '200':
          description: Conversations list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsResponse'

    post:
      summary: Create new conversation
      tags: [Messaging]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [participantId]
              properties:
                participantId: { type: string }
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'

  /conversations/{conversationId}/messages:
    get:
      summary: Get conversation messages
      tags: [Messaging]
      parameters:
        - in: path
          name: conversationId
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: before
          schema:
            type: string
      responses:
        '200':
          description: Messages list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'

    post:
      summary: Send message
      tags: [Messaging]
      parameters:
        - in: path
          name: conversationId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '402':
          description: Payment required for PPV message

  # Search & Discovery
  /search/creators:
    get:
      summary: Search creators
      tags: [Search]
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
            minLength: 2
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: cursor
          schema:
            type: string
      responses:
        '200':
          description: Creator search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorSearchResponse'

  # Moderation & Reports
  /reports:
    post:
      summary: Submit content report
      tags: [Moderation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        '201':
          description: Report submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth & User Schemas
    AuthResponse:
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer }

    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        username: { type: string }
        displayName: { type: string }
        avatarUrl: { type: string, format: uri }
        role: { type: string, enum: [fan, creator, moderator, admin] }
        verified: { type: boolean }
        createdAt: { type: string, format: date-time }

    PublicUser:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        displayName: { type: string }
        avatarUrl: { type: string, format: uri }
        verified: { type: boolean }

    UserUpdateRequest:
      type: object
      properties:
        displayName: { type: string, maxLength: 100 }
        bio: { type: string, maxLength: 500 }
        avatarUrl: { type: string, format: uri }

    # Creator Schemas
    CreatorProfile:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        displayName: { type: string }
        bio: { type: string }
        avatarUrl: { type: string, format: uri }
        bannerUrl: { type: string, format: uri }
        subscriptionPrice: { type: number, minimum: 0 }
        subscriberCount: { type: integer, minimum: 0 }
        postCount: { type: integer, minimum: 0 }
        verified: { type: boolean }
        isSubscribed: { type: boolean }
        socialLinks:
          type: array
          items:
            type: object
            properties:
              platform: { type: string }
              url: { type: string, format: uri }

    CreatorOnboardingRequest:
      type: object
      required: [displayName, bio, subscriptionPrice]
      properties:
        displayName: { type: string, maxLength: 100 }
        bio: { type: string, maxLength: 1000 }
        subscriptionPrice: { type: number, minimum: 4.99 }
        categoryIds: { type: array, items: { type: string } }

    CreatorSettingsRequest:
      type: object
      properties:
        displayName: { type: string, maxLength: 100 }
        bio: { type: string, maxLength: 1000 }
        subscriptionPrice: { type: number, minimum: 4.99 }
        autoAcceptMessages: { type: boolean }
        showOnlineStatus: { type: boolean }

    # Content Schemas
    Post:
      type: object
      properties:
        id: { type: string }
        creatorId: { type: string }
        content: { type: string, maxLength: 2000 }
        mediaUrls: { type: array, items: { type: string, format: uri } }
        isLocked: { type: boolean }
        price: { type: number, minimum: 0 }
        likesCount: { type: integer, minimum: 0 }
        commentsCount: { type: integer, minimum: 0 }
        hasLiked: { type: boolean }
        hasAccess: { type: boolean }
        createdAt: { type: string, format: date-time }
        scheduledFor: { type: string, format: date-time }

    PostsResponse:
      type: object
      properties:
        posts: { type: array, items: { $ref: '#/components/schemas/Post' } }
        nextCursor: { type: string }
        hasMore: { type: boolean }

    CreatePostRequest:
      type: object
      required: [content]
      properties:
        content: { type: string, maxLength: 2000 }
        mediaIds: { type: array, items: { type: string } }
        isLocked: { type: boolean, default: false }
        price: { type: number, minimum: 0 }
        scheduledFor: { type: string, format: date-time }

    # Media Schemas
    SignedUploadResponse:
      type: object
      properties:
        uploadUrl: { type: string, format: uri }
        mediaId: { type: string }
        fields: { type: object }
        expiresIn: { type: integer }

    # Subscription Schemas
    Subscription:
      type: object
      properties:
        id: { type: string }
        creatorId: { type: string }
        userId: { type: string }
        status: { type: string, enum: [active, past_due, canceled, pending] }
        currentPeriodStart: { type: string, format: date-time }
        currentPeriodEnd: { type: string, format: date-time }
        cancelAtPeriodEnd: { type: boolean }

    SubscriptionsResponse:
      type: object
      properties:
        subscriptions: { type: array, items: { $ref: '#/components/schemas/Subscription' } }

    # Messaging Schemas
    Conversation:
      type: object
      properties:
        id: { type: string }
        participants: { type: array, items: { $ref: '#/components/schemas/PublicUser' } }
        lastMessage: { $ref: '#/components/schemas/Message' }
        unreadCount: { type: integer, minimum: 0 }
        updatedAt: { type: string, format: date-time }

    ConversationsResponse:
      type: object
      properties:
        conversations: { type: array, items: { $ref: '#/components/schemas/Conversation' } }
        nextCursor: { type: string }
        hasMore: { type: boolean }

    Message:
      type: object
      properties:
        id: { type: string }
        conversationId: { type: string }
        senderId: { type: string }
        content: { type: string }
        mediaUrls: { type: array, items: { type: string, format: uri } }
        isLocked: { type: boolean }
        price: { type: number, minimum: 0 }
        hasAccess: { type: boolean }
        sentAt: { type: string, format: date-time }

    MessagesResponse:
      type: object
      properties:
        messages: { type: array, items: { $ref: '#/components/schemas/Message' } }
        hasMore: { type: boolean }

    SendMessageRequest:
      type: object
      required: [content]
      properties:
        content: { type: string, maxLength: 1000 }
        mediaIds: { type: array, items: { type: string } }
        isLocked: { type: boolean, default: false }
        price: { type: number, minimum: 0 }

    # Search Schemas
    CreatorSearchResponse:
      type: object
      properties:
        creators: { type: array, items: { $ref: '#/components/schemas/CreatorProfile' } }
        nextCursor: { type: string }
        hasMore: { type: boolean }
        total: { type: integer }

    # Moderation Schemas
    Report:
      type: object
      properties:
        id: { type: string }
        reporterId: { type: string }
        targetType: { type: string, enum: [user, post, message] }
        targetId: { type: string }
        reason: { type: string }
        description: { type: string }
        status: { type: string, enum: [pending, reviewed, resolved] }
        createdAt: { type: string, format: date-time }

    CreateReportRequest:
      type: object
      required: [targetType, targetId, reason]
      properties:
        targetType: { type: string, enum: [user, post, message] }
        targetId: { type: string }
        reason: { type: string, enum: [spam, harassment, inappropriate_content, copyright, other] }
        description: { type: string, maxLength: 500 }

    # Error Schemas
    PaymentRequired:
      type: object
      properties:
        error: { type: string, example: "payment_required" }
        message: { type: string }
        price: { type: number }
        subscriptionRequired: { type: boolean }

    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        details: { type: object }

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'